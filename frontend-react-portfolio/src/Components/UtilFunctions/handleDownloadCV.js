import { toast } from "react-toastify";
import axios from "axios";

const API_URL = process.env.REACT_APP_BACKEND_URL || "http://localhost:8000";

// Defining an asynchronous function to download cv
export const handleDownloadCV = async (e) => {
  // Prevents the default behavior of the event (e.g., navigating away) when the function is triggered.
  e.preventDefault();
  try {
    // Sends a GET request to the server endpoint
    const response = await axios.get(`${API_URL}/api/download-cv`, {
      reponseType: "blob", // Ensures the file is treated as binary data suitable for file downloads (e.g., PDFs).
    });

    // If the response is ok
    if (response.status === 200) {
      // Create a link element and trigger the download
      //   response.data: Contains the binary data (e.g., the CV file).
      // A Blob represents a file-like object of immutable raw data.
      // new Blob([response.data]): Creates a Blob object from the binary data.
      //   window.URL.createObjectURL: Generates a temporary URL that can be used to download the file.
      const url = window.URL.createObjectURL(new Blob([response.data]));

      //   Creates an <a> (anchor) element in the DOM. This will be used to programmatically trigger the file download.
      const link = document.createElement("a");

      //   Sets the href attribute of the <a> element to the temporary URL generated by createObjectURL.
      link.href = url;

      //   set the attribute to download and Specifies the name of the downloaded file
      link.setAttribute("download", "My CV.pdf");

      //   Adds the <a> element to the document so it can be interacted with.
      document.body.appendChild(link);

      //   Programmatically clicks the <a> element to start the file download.
      link.click();

      //   Removes the <a> element from the DOM to clean up after the download.
      document.body.removeChild(link);
    } else {
      // Displays an error if the response status is not 200.
      toast.error("Failed to download CV");
    }
  } catch (error) {
    // Checks if the error includes a server response.
    // Displays a specific error message indicating that the CV file was not found.
    if (error.response && error.response.status === 404) {
      toast.error("CV not found");
    } else {
      console.error(error); // Log the detailed error for debugging
      toast.error("An error occured while downloading the CV");
    }
  }
};
